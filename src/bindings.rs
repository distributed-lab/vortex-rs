/* automatically generated by rust-bindgen 0.72.0 */
use p3_koala_bear::KoalaBear;

pub type GoInt64 = ::std::os::raw::c_longlong;
pub type GoInt = GoInt64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GoSlice {
    pub data: *mut ::std::os::raw::c_void,
    pub len: GoInt,
    pub cap: GoInt,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of GoSlice"][::std::mem::size_of::<GoSlice>() - 24usize];
    ["Alignment of GoSlice"][::std::mem::align_of::<GoSlice>() - 8usize];
    ["Offset of field: GoSlice::data"][::std::mem::offset_of!(GoSlice, data) - 0usize];
    ["Offset of field: GoSlice::len"][::std::mem::offset_of!(GoSlice, len) - 8usize];
    ["Offset of field: GoSlice::cap"][::std::mem::offset_of!(GoSlice, cap) - 16usize];
};

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Element {
    pub data: [u32; 1],
}

unsafe extern "C" {
    pub fn SisShuffle_avx512(a: GoSlice);
    pub fn SisUnshuffle_avx512(a: GoSlice);
    pub fn Sis512_16_avx512(
        k256: GoSlice,
        cosets: GoSlice,
        twiddles: GoSlice, // this is a GoSlice of GoSlice<Element>; treat as opaque
        rag: GoSlice,
        res: GoSlice,
    );
}

pub fn convert_2d_arr_to_go(v: &Vec<Vec<KoalaBear>>) -> Vec<GoSlice> {
    v.iter()
        .map(|v| GoSlice {
            data: v.as_ptr() as *mut _,
            len: v.len() as _,
            cap: v.capacity() as _,
        })
        .collect()
}
